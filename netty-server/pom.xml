<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>nishikinomaki</artifactId>
        <groupId>nishikinomaki</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>netty-server</artifactId>

    <profiles>
        <profile>
            <id>windows</id>
            <properties>
                <env>windows</env>
            </properties>
            <activation>
                <!-- 默认启用的环境配置 -->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <!-- 开发环境 -->
        <profile>
            <id>develop</id>
            <properties>
                <env>develop</env>
            </properties>
        </profile>
        <!-- 生产环境 -->
        <profile>
            <id>product</id>
            <properties>
                <env>product</env>
            </properties>
        </profile>
    </profiles>

    <build>

        <finalName>${project.artifactId}</finalName>

        <!--see https://github.com/trustin/os-maven-plugin
          If you are using IntelliJ IDEA, you should not have any problem.
          If you are using Eclipse, you need to install an additional Eclipse plugin
          because m2e does not evaluate the extension specified in a pom.xml.
          Download os-maven-plugin-1.2.3.Final.jar and put it into the <ECLIPSE_HOME>/plugins directory.
         (As you might have noticed, os-maven-plugin is a Maven extension, a Maven plugin, and an Eclipse plugin.)-->
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
            </extension>
        </extensions>

        <plugins>
            <!-- 将依赖的jar包导入到指定目录去 -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${project.artifactId}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/${project.artifactId}</outputDirectory>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib</classpathPrefix>
                            <!-- 配置默认mainClass -->
                            <mainClass>com.nishikinomaki.server.Main</mainClass>
                        </manifest>
                        <manifestEntries>
                            <!-- 将配置文件目录加入classpath,注意此处必须加斜杠,不然无法识别目录 -->
                            <Class-Path>config/ jar/</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-properties</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <target>
                                <delete>
                                    <fileset dir="${project.build.directory}/classes">
                                        <exclude name="**/*.class"/>
                                        <exclude name="**/*.jar"/>
                                        <exclude name="*.${env}.*"/>
                                        <exclude name="*.bat"/>
                                        <exclude name="*.dat"/>
                                    </fileset>
                                </delete>
                                <!-- overwrite 覆盖 -->
                                <move todir="${project.build.directory}/${project.artifactId}/config" overwrite="yes">
                                    <fileset dir="${project.build.directory}/classes">
                                        <include name="*.${env}.properties"/>
                                        <include name="*.${env}.xml"/>
                                    </fileset>
                                    <mapper type="regexp" from="(.*)\.${env}\.(.*)" to="\1.\2"/>
                                </move>
                                <copy todir="${project.build.directory}/${project.artifactId}" overwrite="yes">
                                    <fileset dir="src/main/scripts">
                                        <patternset>
                                            <include name="*.bat"/>
                                            <include name="*.sh"/>
                                        </patternset>
                                    </fileset>
                                </copy>
                                <move todir="${project.build.directory}/${project.artifactId}/config" overwrite="yes">
                                    <fileset dir="${project.build.directory}/classes">
                                        <patternset>
                                            <include name="*.dat"/>
                                        </patternset>
                                    </fileset>
                                </move>
                                <mkdir dir="${project.build.directory}/${project.artifactId}/jar"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>package-zip</id>
                        <phase>package</phase>
                        <configuration>
                            <target>
                                <zip destfile="${project.build.directory}/${project.artifactId}.zip">
                                    <tarfileset dir="${project.build.directory}/${project.artifactId}"/>
                                </zip>
                                <zip destfile="${project.build.directory}/${project.artifactId}-without-config.zip">
                                    <tarfileset dir="${project.build.directory}/${project.artifactId}">
                                        <exclude name="config/"/>
                                    </tarfileset>
                                </zip>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>nishikinomaki</groupId>
            <artifactId>netty-commons</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!-- netty -->
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>
        <dependency>
            <groupId>org.javassist</groupId>
            <artifactId>javassist</artifactId>
        </dependency>
        <!-- netty -->

        <!-- logback -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.logback-extensions</groupId>
            <artifactId>logback-ext-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>uk.org.lidalia</groupId>
            <artifactId>sysout-over-slf4j</artifactId>
        </dependency>
        <!-- logback -->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
        </dependency>

        <!-- spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <!-- spring -->

        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
        </dependency>

    </dependencies>

</project>